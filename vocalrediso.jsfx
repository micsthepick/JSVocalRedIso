// based on vocalrediso.ny, a built in nyquist filter for audacity: Released under terms of the GNU General Public License version 2
// uses some code from https://github.com/Nbickford/REAPERDenoiser

desc: vocal removal/isolation
//tags: processing vocals stereo
//author: Michael Pannekoek

slider1:0<-100,100,0.1>dry mix
slider2:0<-100,100,0.1>C mix (Vocals)
slider3:0<-5,5,0.001>strength at Low Cut
slider4:0<-5,5,0.001>strength at High Cut
slider5:80<0,24000>Low Cut (Vocals)
slider6:24000<0,24000>High Cut (Vocals)
slider7:0<-90,90,1>Phase (Degrees)
slider8:90<1,180,0.1>Phase width at Low Cut (Degrees)
slider9:90<1,180,0.1>Phase width at High Cut (Degrees)
slider10:1<0,1,0.05>Attenuate if different volume
slider11:1<0,1,1{No,Yes}>undo rotation due to phase
slider12:0<0,5,1{Hann,Triangular,Lanczos (sinc),Blackman-Harris,Blackman-Nutall,Nutall}>pre FFT window
slider13:2<0,5,1{None,Hann,Triangular,Lanczos (sinc),Blackman-Harris,Blackman-Nutall,Nutall}>post FFT window
slider14:0<-180,180,1>Phase2 (Degrees)
slider15:0<0,8192,1>Input buffering (delay, reduce clicks)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output



@slider
// calculate sinc, handling 0 as the limiting value
function sinc(x)
(
	sincIn = $pi * x;
	sincIn == 0 ? 1 : sin(sincIn) / sincIn;
);

// convert low cut and high cut to bins every time a slider is changed
lowBin = min(slider5, slider6) / srate * SIZE;
highBin = max(slider6, slider5) / srate * SIZE;
// convert to radians
rotation = slider7*$pi/180;
// convert percentage to raw scale factor
dryMix = slider1/100;
centreMix = slider2/100;
lowStrength = slider3;
highstrength = slider4;
phaseWlow = slider8*$pi/180;
phaseWhigh = slider9*$pi/180;
cosine = cos(rotation);
sine = sin(rotation);
cosine2 = cos(slider14*$pi/180);
sine2 = sin(slider14*$pi/180);                                
// fill strengthBuffer and phaseWBuffer
bandIndex = 0;
loop(SIZE,
	bandIndex >= lowBin && bandIndex < highBin ?
	(
		// only set values for the appropriate frequency range
		frac = (bandIndex - lowBin)/(highBin - lowBin - 1);
		// fraction of progress through range [lowBin, highBin)
		strength = lowStrength* (1 - frac) + highStrength * frac;
		strengthBuffer[bandIndex] = 10^strength;
		// precaculate strength (actual value should be positive, so it makes
		// sense to take the power of ten, but only after the
		// linear mapping over the spectrum is done.
		phaseW = phaseWlow * (1 - frac) + phaseWhigh * frac;
		phaseWBuffer[bandIndex] = phaseW;
		// precalculate phase width
	);
	
	slider12 == 0 ?
	(
		windowBuffer1[bandIndex] = 0.5 - 0.5 * cos(2*$pi*bandIndex/SIZE);
	);
	slider12 == 1 ?
	(
		windowBuffer1[bandIndex] = bandIndex < SIZE/2 ? (
			bandIndex / (SIZE/2-1)
		) : (
			(SIZE-bandIndex-1) / (SIZE/2-1)
		);
	);
	slider12 == 2 ?
	(
		windowBuffer1[bandIndex] = sinc(2 * bandIndex / SIZE - 1);
	);
	slider12 == 3 ?
	(
		cosIn = $pi * bandIndex / SIZE;
		windowBuffer1[bandIndex] = 0.35875 - 0.48829 * cos(2 * cosIn) + 0.14128 * cos(4 * cosIn) - 0.01168 * cos(6 * cosIn);
	);
	slider12 == 4 ?
	(
		cosIn = $pi * bandIndex / SIZE;
		windowBuffer1[bandIndex] = 0.3635819 - 0.4891775 * cos(2 * cosIn) + 0.1365995 * cos(4 * cosIn) - 0.0106411 * cos(6 * cosIn);
	);
	slider12 == 5 ?
	(
		cosIn = $pi * bandIndex / SIZE;
		windowBuffer1[bandIndex] = 0.355768 - 0.487396 * cos(2 * cosIn) + 0.144232 * cos(4 * cosIn) - 0.012604 * cos(6 * cosIn);
	);
	
	slider13 == 0 ?
	(
		windowBuffer2[bandIndex] = 1;
	);
	
	slider13 == 1 ?
	(
		windowBuffer2[bandIndex] = 0.5 - 0.5 * cos(2*$pi*bandIndex/SIZE);
	);
	slider13 == 2 ? (
		windowBuffer2[bandIndex] = bandIndex < SIZE/2 ? (
			bandIndex / (SIZE/2-1)
		) : (
			(SIZE-bandIndex-1) / (SIZE/2-1)
		);
	);
	slider13 == 3 ?
	(
		windowBuffer2[bandIndex] = sinc(2 * bandIndex / SIZE - 1);
	);
	slider13 == 4 ?
	(
		cosIn = $pi * bandIndex / SIZE;
		windowBuffer2[bandIndex] = 0.35875 - 0.48829 * cos(2 * cosIn) + 0.14128 * cos(4 * cosIn) - 0.01168 * cos(6 * cosIn);
	);
	slider13 == 5 ?
	(
		cosIn = $pi * bandIndex / SIZE;
		windowBuffer2[bandIndex] = 0.3635819 - 0.4891775 * cos(2 * cosIn) + 0.1365995 * cos(4 * cosIn) - 0.0106411 * cos(6 * cosIn);
	);
	slider13 == 6 ?
	(
		cosIn = $pi * bandIndex / SIZE;
		windowBuffer2[bandIndex] = 0.355768 - 0.487396 * cos(2 * cosIn) + 0.144232 * cos(4 * cosIn) - 0.012604 * cos(6 * cosIn);
	);
	
	bandIndex += 1;
	// next index
);



@init
// init variables
// FFT - fft window size (will be constant)
SIZE = 8192;
// track how many half frames of delay from the start we are
// to mute the first inital buffers
silence = 2;


// fft has real and complex values thus is twice as large
bufferFFTIL = SIZE*0;
bufferFFTIR = SIZE*2;
bufferFFTO = SIZE*4;
bufferI1L = SIZE*6;
bufferI2L = SIZE*7;
bufferDryL = SIZE*8;
bufferI1R = SIZE*9;
bufferI2R = SIZE*10;
bufferDryR = SIZE*11;
bufferO1C = SIZE*12;
bufferO2C = SIZE*13;
strengthBuffer = SIZE*14;
phaseWBuffer = SIZE*15;
windowBuffer1 = SIZE*16;
windowBuffer2 = SIZE*17;
inputbufL = SIZE*18;
inputbufR = SIZE*18+8192;
freembuf(SIZE*18+16384);

// samplesCollected tracks the position in the last of the two tiles
// ranges from 0 to (SIZE/2)-1
samplesCollected = 0;
// offset ranges from 0 to SIZE-1
offset = 0;

// position in input buffer
inPos = 0;

// tell reaper what delay this plugin will introduce,
// so that it can be compensated for
pdc_delay = SIZE + slider15;
// delay is one full buffer
pdc_bot_ch = 0; pdc_top_ch = 2;
// which channels are delayed
// (channel number must be greater than or equal to 0,
// but less than 2, so 0 and 1 - LR output).



@sample
// store raw samples for later storing in input buffer
firstL = spl0;
firstR = spl1;

// input corrections:
// rotate stereo field to isloate different phases
// and read input from buffer
slider15 == 0 ?
(
	sampleLeft = cosine * spl0 + sine * spl1;
	sampleRight = - sine * spl0 + cosine * spl1;
) : (
	sampleLeft = cosine * inputbufL[inPos] + sine * inputbufR[inPos];
	sampleRight =  - sine * inputbufL[inPos] + cosine * inputbufR[inPos];
);

// that's a lowercase L in spl, not the number 1.
// spl0 corresponds to L, spl1 corresponds to R.

// find positions in tile 1 and 2
tilePos1 = samplesCollected + SIZE/2;
tilePos2 = samplesCollected;

// apply the selected envelope while writing the sample into the tile buffer
// See https://en.wikipedia.org/wiki/Window_function
windowTile1 = windowBuffer1[tilePos1];
windowTile2 = windowBuffer1[tilePos2];
// windowTile2 has a relationship to the other window tile, so
// it is epressed in this way for accuracy and speed

// subtract or output the center channel from L and R based on slider1
// if slider1 is less than two, the Left channel is present in the output
// if slider1 is equal to 2, then the center channel is present in the output,
// otherwise it is subtracted
dryL = bufferDryL[offset];
dryR = bufferDryR[offset];
outPart1 = bufferO1C[tilePos1] * windowBuffer2[tilePos1];
outPart2 = bufferO2C[tilePos2] * windowBuffer2[tilePos2];
outScale = windowBuffer1[tilePos1] * windowBuffer2[tilePos1] + windowBuffer1[tilePos2] * windowBuffer2[tilePos2];
outC = (outPart1 + outPart2) / outScale;
// account for how the two overlap positions
// in the window don't add to 1

centrePart = outC * centreMix;
leftPart = dryL * dryMix;
rightPart = dryR * dryMix;
outL = leftPart + centrePart;
outR = rightPart + centrePart;

// write to dry buffers
bufferDryL[offset] = sampleLeft;
bufferDryR[offset] = sampleRight;

// output audio, undoing rotation
silence == 0 ? (
	slider11 == 0 ?
	(
		spl0 = outL;
		spl1 = outR;
	) : (
		spl0 = outL * cosine - outR * sine;
		spl1 = outR * cosine + outL * sine;
	);
) : spl0 = spl1 = 0;

inputbufL[inPos] = firstL;
inputbufR[inPos] = firstR;

// write to buffers:
// Left + Right input buffers
bufferI1L[tilePos1] = sampleLeft * windowTile1;
bufferI2L[tilePos2] = sampleLeft * windowTile2;
bufferI1R[tilePos1] = sampleRight * windowTile1;
bufferI2R[tilePos2] = sampleRight * windowTile2;

// increment positions
samplesCollected += 1;

offset += 1;
offset == SIZE ?
(
	offset = 0;
);

inPos += 1;
inPos >= slider15 ?
(
	inPos = 0;
);

// once we reach the end of a tile:
samplesCollected == SIZE/2 ?
(
	// make silence go to 0
	silence > 0 ? silence -= 1;
	samplesCollected = 0;
	// wrap back to 0 on the tile
	
	// calculate fft for left channel
	// Loop over each of the audio samples, from index = 0 to SIZE - 1.
	index = 0;
	loop(SIZE,
		bufferFFTIL[2 * index + 0] = bufferI1L[index];
		// Real part
		bufferFFTIL[2 * index + 1] = 0.0;
		// Imaginary part
		index += 1;
		// Next index
	);
	// calculate fft in place
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIL, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIL, SIZE);
	
	// calculate fft for right channel
	// Loop over each of the audio samples, from index = 0 to SIZE - 1.
	index = 0;
	loop(SIZE,
		bufferFFTIR[2 * index + 0] = bufferI1R[index];
		// Real part
		bufferFFTIR[2 * index + 1] = 0.0;
		// Imaginary part
		index += 1;
		// Next index
	);
	// calculate fft in place
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIR, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIR, SIZE);
	
	
	// Compute center:
	// Make a weighted center (mono with respect to phase)
	// that can be substracted from L&R
	// we start off with the fft of the mid channel in the fftBuffer
	bandIndex = 0;
	loop(SIZE,
			bandIndex >= lowBin && bandIndex < highBin ?
			(
				Lreal = bufferFFTIL[bandIndex * 2];
				Limag = bufferFFTIL[bandIndex * 2 + 1];
				Rreal = bufferFFTIR[bandIndex * 2];
				Rimag = bufferFFTIR[bandIndex * 2 + 1];
				strength = strengthBuffer[bandIndex];
				// get strength
				phaseW = phaseWBuffer[bandIndex];
				// get phase width
				normL = sqrt(sqr(Lreal) + sqr(Limag));
				normR = sqrt(sqr(Rreal) + sqr(Rimag));
				normprod = normL * normR;
				//sinval = (Lreal * Rimag - Limag * Rreal);
				cosineval = (Lreal * Rreal + Limag * Rimag) * cosine2 + (Limag * Rreal + Lreal * Rimag) * sine2;
				cosnorm = cosineval / normprod;
				uncapped = acos(cosnorm) / phaseW;
				weight1 = min(1, uncapped);
				weight2 = 1 - (weight1 ^ strength);
				// attenuate if relative norms are very different, and option enabled
				atten = 1 - (sqr(normL - normR)/sqr(normL + normR));
				weight = weight2 * atten ^ (strength * slider10);
													  
				fftOutReal = Lreal + Rreal;
				fftOutImag = Limag + Rimag;
				// isolate the mid fft (can just sum real and imaginary component
				// since fft is a linear operator)
				fftOutReal *= weight / SIZE;
				fftOutImag *= weight / SIZE;
				// attenuate by weight to do the actual isolation, and divide by SIZE
				// to normalize the fft (since SIZE entries in fft buffer)
				bufferFFTO[bandIndex * 2] = fftOutReal;
				bufferFFTO[bandIndex * 2 + 1] = fftOutImag;
			) : (
				bufferFFTO[bandIndex * 2] = 0;
				bufferFFTO[bandIndex * 2 + 1] = 0;
			);
		bandIndex += 1;
	);
	
	// apply ifft to calculate center channel, which should now be present in fftBuffer
	fft_ipermute(bufferFFTO, SIZE);
	ifft(bufferFFTO, SIZE);
	
	// Copy from the complex numbers in fftBuffer to the center tile:
	index = 0;
	loop(SIZE,
		bufferO1C[index] = bufferFFTO[2 * index + 0];
		index += 1;
	);
	
	temp = bufferI1L;
	bufferI1L = bufferI2L;
	bufferI2L = temp;
	
	temp = bufferI1R;
	bufferI1R = bufferI2R;
	bufferI2R = temp;
	
	temp = bufferO1C;
	bufferO1C = bufferO2C;
	bufferO2C = temp;
);

// sliders are serialized automatically
// thus nothing to serialize, as nothing else makes sense to store
