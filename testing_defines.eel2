// Helper functions to check for positive infinity, negative infinity, and nan
function is_pos_inf(x) (x ==  1/0);
function is_neg_inf(x) (x == -1/0);
function is_nan(x) (x != x;);

function assert_equal_exact(expected, actual, message) global(failed_asserts, successful_asserts) (
	is_nan(expected) && is_nan(actual) ? successful_asserts += 1 :
	(is_pos_inf(expected) && is_pos_inf(actual)) || (is_neg_inf(expected) && is_neg_inf(actual)) ? successful_asserts += 1 :
	expected !== actual ? (
		fprintf(3, "\033[0;31mexpected: %g, was: %g. %s\033[0m\n", expected, actual, message);
		failed_asserts += 1;
	) : successful_asserts += 1;
);

function assert_equal_exact(expected, actual) global() (
	assert_equal_exact(expected, actual, "values differ!")
);

function assert_near_equal(expected, tolerance, actual, message) global(failed_asserts, successful_asserts) (
	is_nan(expected) || is_nan(actual) || is_nan(tolerance) ? successful_asserts += 1 :
	(is_pos_inf(expected) || is_neg_inf(expected)) && (is_pos_inf(actual) || is_neg_inf(actual)) ? successful_asserts += 1 :
	abs(expected - actual) > tolerance ? (
		fprintf(3, "\033[0;31mexpected: %g (Â±%g), was: %g. %s\033[0m\n", expected, tolerance, actual, message);
		failed_asserts += 1;
	) : successful_asserts += 1;
);

function assert_near_equal(expected, tolerance, actual) global() (
	assert_near_equal(expected, tolerance, actual, "values are not equal within tolerance!")
);

function assert_true(boolean, message) global(failed_asserts, successful_asserts) (
	(!boolean) ? (
		fprintf(3, "\033[0;31mexpected: true, was: false. %s\033[0m\n", message);
		failed_asserts += 1;
	) : successful_asserts += 1;
);

function assert_false(boolean, message) global(failed_asserts, successful_asserts) (
	boolean ? (
		fprintf(3, "\033[0;31mexpected: false, was: true. %s\033[0m\n", message);
		failed_asserts += 1;
	) : successful_asserts += 1;
);

function assert_true(boolean) global() (
	assert_true(boolean, "");
);

function assert_false(boolean) global() (
	assert_false(boolean, "");
);

function test_summary() global(failed_asserts successful_asserts) local(total) (
	total = failed_asserts + successful_asserts;
	failed_asserts === 0 ? fprintf(3, "\033[0;32mAll %d asserts succeeded.\033[0m\n", total) : (
		successful_asserts > 0 ? printf("\033[0;34m%d of %d asserts succeeded.\033[0m\n", successful_asserts, total);
		failed_asserts > 0 ? (
			printf("\033[0;31m%d of %d asserts failed.\nFAILURE, see above!\033[0m\n", failed_asserts, total);
		)	
	)
);
