// based on vocalrediso.ny, a built in nyquist filter for audacity: Released under terms of the GNU General Public License version 2
// uses some code from https://github.com/Nbickford/REAPERDenoiser

desc: vocal removal/isolation
//tags: processing vocals stereo
//author: Michael Pannekoek

slider1:0<-100,100,0.1>dry mix
slider2:0<-100,100,0.1>C mix (Vocals)
slider3:0<-5,5,0.001>strength at Low Cut
slider4:0<-5,5,0.001>strength at High Cut
slider5:80<0,24000,10>Low Cut (Vocals)
slider6:24000<0,24000,10>High Cut (Vocals)
slider7:0<-90,90,0.1>Phase (Degrees)
slider8:90<1,180,0.1>Phase width at Low Cut (Degrees)
slider9:90<1,180,0.1>Phase width at High Cut (Degrees)
slider10:1<0,1,0.05>Attenuate if different volume
slider11:1<0,1,1{No,Yes}>undo input corrections
slider12:0<-180,180,0.05>Phase2 (Degrees)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output



@slider
// calculate sinc, handling 0 as the limiting value
function sinc(x)
(
	sincIn = $pi * x;
	sincIn == 0 ? 1 : sin(sincIn) / sincIn;
);

// convert low cut and high cut to bins every time a slider is changed
lowBin = min(slider5, slider6) / srate * SIZE;
highBin = max(slider6, slider5) / srate * SIZE;
// convert to radians
rotation = slider7*$pi/180;
// convert percentage to raw scale factor
dryMix = slider1/100;
wetMix = slider2/100;
lowStrength = slider3;
highstrength = slider4;
phaseWlow = slider8*$pi/180;
phaseWhigh = slider9*$pi/180;
cosine = cos(rotation);
sine = sin(rotation);
cosine2 = cos(slider12*$pi/180);
sine2 = sin(slider12*$pi/180);
// fill strengthBuffer and phaseWBuffer
bandIndex = 0;
loop(SIZE,
	bandIndex >= lowBin && bandIndex < highBin ?
	(
		// only set values for the appropriate frequency range
		frac = (bandIndex - lowBin)/(highBin - lowBin - 1);
		frac = max(0, min(1, frac));
		// fraction of progress through range [lowBin, highBin)
		strength = lowStrength* (1 - frac) + highStrength * frac;
		strengthBuffer[bandIndex] = 10^strength;
		// precaculate strength (actual value should be positive, so it makes
		// sense to take the power of ten, but only after the
		// linear mapping over the spectrum is done.
		phaseW = phaseWlow * (1 - frac) + phaseWhigh * frac;
		phaseWBuffer[bandIndex] = phaseW;
		// precalculate phase width
	);

	bandIndex += 1;
	// next index
);



@init
// init variables
// buffers
// FFT - fft window size (will be constant)
SIZE = 32768;
SIZEMINUSONE = SIZE-1;
DOUBLESIZE = SIZE*2;
HALFSIZE = SIZE/2;
HALFSIZEMINUSONE = HALFSIZE-1;
QUARTERSIZE = SIZE/4;
THREEQUARTER = 3*SIZE/4;
// track how many half frames of delay from the start we are
// to mute the first inital buffers
silence = 2;


// fft has real and complex values thus is twice as large
// set each buffer to the offsef from the last to make it easier to move them around
bufferFFTIL = 0;
bufferFFTIR = bufferFFTIL+DOUBLESIZE;
bufferFFTOL = bufferFFTIR+DOUBLESIZE;
bufferFFTOR = bufferFFTOL+DOUBLESIZE;
bufferI1L = bufferFFTOR+DOUBLESIZE;
bufferI2L = bufferI1L+SIZE;
bufferI3L = bufferI2L+SIZE;
bufferI4L = bufferI3L+SIZE;
bufferI1R = bufferI4L+SIZE;
bufferI2R = bufferI1R+SIZE;
bufferI3R = bufferI2R+SIZE;
bufferI4R = bufferI3R+SIZE;
bufferO1L = bufferI4R+SIZE;
bufferO2L = bufferO1L+SIZE;
bufferO3L = bufferO2L+SIZE;
bufferO4L = bufferO3L+SIZE;
bufferO1R = bufferO4L+SIZE;
bufferO2R = bufferO1R+SIZE;
bufferO3R = bufferO2R+SIZE;
bufferO4R = bufferO3R+SIZE;
strengthBuffer = bufferO4R+SIZE;
phaseWBuffer = strengthBuffer+SIZE;
windowBuffer = phaseWBuffer+SIZE;
freembuf(windowBuffer+SIZE);

// samplesCollected tracks the position in the last of the two tiles
// ranges from 0 to (SIZE/2)-1
samplesCollected = 0;

// tell reaper what delay this plugin will introduce,
// so that it can be compensated for
pdc_delay = SIZE;
// delay is one full buffer
pdc_bot_ch = 0; pdc_top_ch = 2;
// which channels are delayed
// (channel number must be greater than or equal to 0,
// but less than 2, so 0 and 1 - LR output).

// fill windowBuffer
loop(SIZE,
	windowBuffer[bandIndex] = sin((bandIndex+1/2)*$pi/SIZE);

	bandIndex += 1;
);



@sample
// store raw samples for later storing in input buffer
firstL = spl0;
firstR = spl1;

// that's a lowercase L in spl, not the number 1.
// spl0 corresponds to L, spl1 corresponds to R.

// read input from buffers (or just read from spl if no buffering)

sampleLeft = firstL;
sampleRight = firstR;

// find positions in tile 1 and 2
tilePos1 = samplesCollected + THREEQUARTER;
tilePos2 = samplesCollected + HALFSIZE;
tilePos3 = samplesCollected + QUARTERSIZE;
tilePos4 = samplesCollected;

// apply the selected envelope while writing the sample into the tile buffer
// See https://en.wikipedia.org/wiki/Window_function
windowTile1 = windowBuffer[tilePos1];
windowTile2 = windowBuffer[tilePos2];
windowTile3 = windowBuffer[tilePos3];
windowTile4 = windowBuffer[tilePos4];


// output samples
outLPart1 = bufferO1L[tilePos1] * windowTile1;
outLPart2 = bufferO2L[tilePos2] * windowTile2;
outLPart3 = bufferO3L[tilePos3] * windowTile3;
outLPart4 = bufferO4L[tilePos4] * windowTile4;
outL = (outLPart1 + outLPart2 + outLPart3 + outLPart4);// / outScale;

outRPart1 = bufferO1R[tilePos1] * windowTile1;
outRPart2 = bufferO2R[tilePos2] * windowTile2;
outRPart3 = bufferO3R[tilePos3] * windowTile3;
outRPart4 = bufferO4R[tilePos4] * windowTile4;
outR = (outRPart1 + outRPart2 + outRPart3 + outRPart4);// / outScale;


// output audio
silence == 0 ? (
	spl0 = outL;
	spl1 = outR;
) : spl0 = spl1 = 0;



// write to input tile buffers:
// Left + Right input buffers
bufferI1L[tilePos1] = sampleLeft * windowTile1;
bufferI2L[tilePos2] = sampleLeft * windowTile2;
bufferI3L[tilePos3] = sampleLeft * windowTile3;
bufferI4L[tilePos4] = sampleLeft * windowTile4;

bufferI1R[tilePos1] = sampleRight * windowTile1;
bufferI2R[tilePos2] = sampleRight * windowTile2;
bufferI3R[tilePos3] = sampleRight * windowTile3;
bufferI4R[tilePos4] = sampleRight * windowTile4;

// increment positions
samplesCollected += 1;

// once we reach the end of a tile:
samplesCollected == QUARTERSIZE ?
(
	// make silence go to 0
	silence > 0 ? silence -= 1;
	samplesCollected = 0;
	// wrap back to 0 on the tile

	// calculate fft for left channel
	// Loop over each of the audio samples, from index = 0 to SIZE - 1.
	index = 0;
	loop(SIZE,
		bufferFFTIL[index*2] = bufferI1L[index] / SIZE;
		// Real part
		bufferFFTIL[index*2 + 1] = 0.0;
		// Imaginary part
		index += 1;
		// Next index
	);
	// calculate fft in place
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIL, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIL, SIZE);

	// calculate fft for right channel
	// Loop over each of the audio samples, from index = 0 to SIZE - 1.
	index = 0;
	loop(SIZE,
		bufferFFTIR[index*2] = bufferI1R[index] / SIZE;
		// Real part
		bufferFFTIR[index*2 + 1] = 0.0;
		// Imaginary part
		index += 1;
		// Next index
	);
	// calculate fft in place
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIR, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIR, SIZE);


	// Compute center:
	// Make a weighted center (mono with respect to phase)
	// that can be substracted from L&R
	// we start off with the fft of the mid channel in the fftBuffer
	realIndex = 0;
	imagIndex = 1;
	bandIndex = 0;
	loop(HALFSIZE,
		// get dry fft coefficeients
		LrealRaw = bufferFFTIL[realIndex];
		LimagRaw = bufferFFTIL[imagIndex];
		RrealRaw = bufferFFTIR[realIndex];
		RimagRaw = bufferFFTIR[imagIndex];
		
		// input corrections
		// first, change the phase of L based on phase2:
		Lreal = LrealRaw*cosine2 + LimagRaw*sine2;
		Limag = LimagRaw*cosine2 - LrealRaw*sine2;

		// now mix L&R together based on phase
		RrealDry = RrealRaw*cosine + Lreal*sine;
		RimagDry = RimagRaw*cosine + Limag*sine;
		LrealDry = Lreal*cosine - RrealRaw*sine;
		LimagDry = Limag*cosine - RimagRaw*sine;
		
		bandIndex >= lowBin && bandIndex < highBin ?
		(
			// apply  vocal reduction algorithm only in the right bands
			strength = strengthBuffer[bandIndex];
			// get strength
			phaseW = phaseWBuffer[bandIndex];
			// get phase width
			normL = sqrt(sqr(LrealDry) + sqr(LimagDry));
			normR = sqrt(sqr(RrealDry) + sqr(RimagDry));
			weight = (
				1 - (
					min(
						1,
						acos(
							(LrealDry * RrealDry + LimagDry * RimagDry) / (normL * normR)
						) / phaseW
					) ^ strength
				)
			) * (
				1 - (sqr(normL - normR)/sqr(normL + normR))
			) ^ (strength * slider10) / 2;

			centerReal = (LrealDry + RrealDry) * weight;
			centerImag = (LimagDry + RimagDry) * weight;
			// isolate the mid fft (can just sum real and imaginary component
			// since fft is a linear operator)
		) : (
			// let wet signal have 0 for fft coefficients when out of bounds
			fftOutLReal = 0;
			fftOutLImag = 0;
			fftOutRReal = 0;
			fftOutRImag = 0;
		);

		// apply wet dry mix
		fftOutLReal = LrealDry * dryMix + centerReal * wetMix;
		fftOutLImag = LimagDry * dryMix + centerImag * wetMix;
		fftOutRReal = RrealDry * dryMix + centerReal * wetMix;
		fftOutRImag = RimagDry * dryMix + centerImag * wetMix;

		// apply reverse of input corrections
		slider11 != 0 ? (
			// unmix L & R
			fftOutRReal = fftOutRReal*cosine - fftOutLReal*sine;
			fftOutRImag = fftOutRImag*cosine - fftOutLImag*sine;
			newLreal = fftOutLReal*cosine + fftOutRReal*sine;
			newLimag = fftOutLImag*cosine + fftOutRImag*sine;
			
			// revert phase change to L
			fftOutLReal = newLreal*cosine2 - newLimag*sine2;
			fftOutLImag = newLimag*cosine2 + newLreal*sine2;
		);

		// copy to ouput buffers
		bufferFFTOL[realIndex] = fftOutLReal;
		bufferFFTOL[imagIndex] = fftOutLImag;
		bufferFFTOR[realIndex] = fftOutRReal;
		bufferFFTOR[imagIndex] = fftOutRImag;

		realIndex += 2;
		imagIndex += 2;
		bandIndex += 1;
	);
	
	memset(bufferFFTOL+SIZE, 0, SIZE);
	memset(bufferFFTOR+SIZE, 0, SIZE);
	
	// apply ifft to FFTOL
	fft_ipermute(bufferFFTOL, SIZE);
	ifft(bufferFFTOL, SIZE);

	// apply ifft to FFTOR
	fft_ipermute(bufferFFTOR, SIZE);
	ifft(bufferFFTOR, SIZE);

	// Copy from the complex numbers in bufferFFTOL to the bufferO1L tile:
	index = 0;
	loop(SIZE,
		// only take real part
		bufferO1L[index] = bufferFFTOL[index*2];
		index += 1;
	);

	// Copy from the complex numbers in bufferFFTOR to the bufferO1R tile:
	index = 0;
	loop(SIZE,
		// only take real part
		bufferO1R[index] = bufferFFTOR[index*2];
		index += 1;
	);

	temp = bufferI1L;
	bufferI1L = bufferI2L;
	bufferI2L = bufferI3L;
	bufferI3L = bufferI4L; 
	bufferI4L = temp;

	temp = bufferI1R;
	bufferI1R = bufferI2R;
	bufferI2R = bufferI3R;
	bufferI3R = bufferI4R; 
	bufferI4R = temp;
	
	temp = bufferO1L;
	bufferO1L = bufferO2L;
	bufferO2L = bufferO3L;
	bufferO3L = bufferO4L; 
	bufferO4L = temp;

	temp = bufferO1R;
	bufferO1R = bufferO2R;
	bufferO2R = bufferO3R;
	bufferO3R = bufferO4R; 
	bufferO4R = temp;

);

// sliders are serialized automatically
// thus nothing to serialize, as nothing else makes sense to store
